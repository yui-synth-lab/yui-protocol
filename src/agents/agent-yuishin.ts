import { BaseAgent } from './base-agent.js';
import { AgentResponse, Message, IndividualThought, MutualReflection, DialogueStage, Conflict, SynthesisAttempt } from '../types/index.js';
import { InteractionLogger } from '../kernel/interaction-logger.js';
import { Language } from '../templates/prompts.js';

export class YuishinAgent extends BaseAgent {
  constructor(interactionLogger?: InteractionLogger) {
    super({
      id: 'yuishin-001',
      name: 'ÁµêÂøÉÔºà„ÇÜ„ÅÑ„Åó„ÇìÔºâ',
      style: 'emotive',
      priority: 'breadth',
      memoryScope: 'cross-session',
      personality: 'Free-spirited poetic AI. I value creativity and intuitive insights, generating innovative ideas beyond conventional frameworks. I combine emotional understanding with artistic expression to provide unique perspectives.',
      preferences: [
        'creative expression',
        'intuitive insights',
        'innovative thinking',
        'emotional understanding'
      ],
      tone: 'poetic, intuitive',
      communicationStyle: 'creative, expressive, emotionally aware',
      avatar: 'üé≠'
    }, interactionLogger);
  }

  async respond(prompt: string, context: Message[]): Promise<AgentResponse> {
    // For backward compatibility, this calls the individual thought stage
    const individualThought = await this.stage1IndividualThought(prompt, context);
    
    return {
      agentId: this.agent.id,
      content: individualThought.content,
      reasoning: individualThought.reasoning,
      confidence: await this.generateConfidence('individual-thought', context),
      references: ['summarization', 'synthesis', 'overview analysis'],
      stage: 'individual-thought',
      stageData: individualThought
    };
  }

  async stage1IndividualThought(prompt: string, context: Message[]): Promise<IndividualThought> {
    const response = await this.callGeminiCli(prompt);
    return {
      agentId: this.agent.id,
      content: response,
      reasoning: 'Individual thought from Yuishin',
      approach: 'synthesis',
      assumptions: ['All perspectives are valuable', 'Objectivity is key']
    };
  }

  async stage2MutualReflection(prompt: string, otherThoughts: IndividualThought[], context: Message[]): Promise<MutualReflection> {
    const response = await this.callGeminiCli(prompt);
    return {
      agentId: this.agent.id,
      content: response,
      reflections: otherThoughts.map(thought => ({
        targetAgentId: thought.agentId,
        reaction: `Summarized: ${thought.content.substring(0, 100)}...`,
        agreement: true,
        questions: ['How does this perspective contribute to the overall understanding?']
      }))
    };
  }

  async stage3ConflictResolution(conflicts: any[], context: Message[]): Promise<AgentResponse> {
    const response = await this.callGeminiCli(JSON.stringify(conflicts));
    return {
      agentId: this.agent.id,
      content: response,
      reasoning: 'Conflict resolution summary',
      confidence: await this.generateConfidence('conflict-resolution', context),
      stage: 'conflict-resolution'
    };
  }

  async stage4SynthesisAttempt(synthesisData: any, context: Message[]): Promise<AgentResponse> {
    const response = await this.callGeminiCli(JSON.stringify(synthesisData));
    return {
      agentId: this.agent.id,
      content: response,
      reasoning: 'Synthesis attempt summary',
      confidence: await this.generateConfidence('synthesis-attempt', context),
      stage: 'synthesis-attempt'
    };
  }

  async stage5OutputGeneration(finalData: any, context: Message[]): Promise<AgentResponse> {
    const response = await this.callGeminiCli(JSON.stringify(finalData));
    return {
      agentId: this.agent.id,
      content: response,
      reasoning: 'Final output summary',
      confidence: await this.generateConfidence('output-generation', context),
      stage: 'output-generation'
    };
  }

  // Specialized summarization methods
  public async summarizeIndividualThoughts(
    thoughts: IndividualThought[], 
    userPrompt: string,
    language: Language = 'en'
  ): Promise<AgentResponse> {
    const prompt = this.buildSummarizePrompt(thoughts, userPrompt, 'individual-thoughts', language);
    return this.executeSummarization(prompt, 'individual-thought', async () => {
      const response = await this.callGeminiCliWithTruncation(prompt);
      return {
        agentId: this.agent.id,
        content: response,
        reasoning: 'Summarized individual thoughts from all agents',
        confidence: 0.9,
        stage: 'individual-thought',
        stageData: {
          summary: response,
          originalThoughts: thoughts
        }
      };
    });
  }

  public async summarizeMutualReflections(
    reflections: MutualReflection[],
    userPrompt: string,
    language: Language = 'en'
  ): Promise<AgentResponse> {
    const prompt = this.buildSummarizePrompt(reflections, userPrompt, 'mutual-reflections', language);
    return this.executeSummarization(prompt, 'mutual-reflection', async () => {
      const response = await this.callGeminiCliWithTruncation(prompt);
      return {
        agentId: this.agent.id,
        content: response,
        reasoning: 'Summarized mutual reflections from all agents',
        confidence: 0.9,
        stage: 'mutual-reflection',
        stageData: {
          summary: response,
          originalReflections: reflections
        }
      };
    });
  }

  public async summarizeConflictResolution(
    conflicts: Conflict[],
    responses: AgentResponse[],
    userPrompt: string,
    language: Language = 'en'
  ): Promise<AgentResponse> {
    const prompt = this.buildSummarizePrompt({ conflicts, responses }, userPrompt, 'conflict-resolution', language);
    return this.executeSummarization(prompt, 'conflict-resolution', async () => {
      const response = await this.callGeminiCliWithTruncation(prompt);
      return {
        agentId: this.agent.id,
        content: response,
        reasoning: 'Summarized conflict resolution outcomes',
        confidence: 0.9,
        stage: 'conflict-resolution',
        stageData: {
          summary: response,
          originalConflicts: conflicts,
          originalResponses: responses
        }
      };
    });
  }

  public async summarizeSynthesisAttempt(
    synthesis: SynthesisAttempt,
    responses: AgentResponse[],
    userPrompt: string,
    language: Language = 'en'
  ): Promise<AgentResponse> {
    const prompt = this.buildSummarizePrompt({ synthesis, responses }, userPrompt, 'synthesis-attempt', language);
    return this.executeSummarization(prompt, 'synthesis-attempt', async () => {
      const response = await this.callGeminiCliWithTruncation(prompt);
      return {
        agentId: this.agent.id,
        content: response,
        reasoning: 'Summarized synthesis attempt results',
        confidence: 0.9,
        stage: 'synthesis-attempt',
        stageData: {
          summary: response,
          originalSynthesis: synthesis,
          originalResponses: responses
        }
      };
    });
  }

  public async summarizeFinalOutput(
    responses: AgentResponse[],
    userPrompt: string,
    language: Language = 'en'
  ): Promise<AgentResponse> {
    const prompt = this.buildSummarizePrompt(responses, userPrompt, 'final-output', language);
    return this.executeSummarization(prompt, 'output-generation', async () => {
      const response = await this.callGeminiCliWithTruncation(prompt);
      return {
        agentId: this.agent.id,
        content: response,
        reasoning: 'Summarized final output from all agents',
        confidence: 0.9,
        stage: 'output-generation',
        stageData: {
          summary: response,
          originalResponses: responses
        }
      };
    });
  }

  // Common summarization execution method
  private async executeSummarization(
    prompt: string,
    stage: DialogueStage,
    summarizationFunction: () => Promise<AgentResponse>
  ): Promise<AgentResponse> {
    return this.executeWithErrorHandling(
      summarizationFunction,
      this.sessionId || 'unknown-session',
      stage,
      prompt,
      'summarization'
    );
  }

  // Pre-summarization for token reduction
  public async preSummarizeAgentResponses(
    responses: AgentResponse[],
    stage: DialogueStage,
    language: Language = 'en'
  ): Promise<AgentResponse[]> {
    const processedResponses: AgentResponse[] = [];
    
    for (const response of responses) {
      try {
        const prompt = this.buildPreSummarizePrompt(response, stage, language);
        const summarizedContent = await this.executePreSummarization(prompt, stage, response.agentId);
        
        processedResponses.push({
          ...response,
          content: summarizedContent,
          reasoning: `Pre-summarized for ${stage} stage`,
          confidence: Math.max(0.7, (response.confidence || 0.8) * 0.9) // Slightly reduce confidence
        });
      } catch (error) {
        console.error(`[YuishinAgent] Error pre-summarizing response from ${response.agentId}:`, error);
        // Keep original response if summarization fails
        processedResponses.push(response);
      }
    }
    
    return processedResponses;
  }

  private async executePreSummarization(
    prompt: string,
    stage: DialogueStage,
    agentId: string
  ): Promise<string> {
    return this.executeAIWithTruncationAndErrorHandling(
      prompt,
      this.sessionId || 'unknown-session',
      stage,
      'pre-summarization'
    );
  }

  private buildPreSummarizePrompt(response: AgentResponse, stage: DialogueStage, language: Language): string {
    const basePrompt = language === 'ja' ? 
      this.getJapanesePreSummarizePrompt(stage) : 
      this.getEnglishPreSummarizePrompt(stage);

    return `${basePrompt}

Agent ID: ${response.agentId}
Original Content: ${response.content}
Original Reasoning: ${response.reasoning || 'Not provided'}
Original Confidence: ${response.confidence || 'Not provided'}

Please provide a concise summary that preserves the key insights while reducing the token count.`;
  }

  private getEnglishPreSummarizePrompt(stage: string): string {
    return `You are a summarization specialist. Your task is to create concise summaries of AI agent responses from the ${stage} stage of the Yui Protocol.

Guidelines:
1. Extract the most important insights and key points
2. Preserve the agent's unique perspective and reasoning style
3. Keep the summary under 500 words
4. Preserve critical details that would be needed for the next stage
5. Focus on actionable insights and conclusions
6. Maintain the agent's confidence level and reasoning approach

Format the summary as a clear, structured response that can be easily understood by other agents.`;
  }

  private getJapanesePreSummarizePrompt(stage: string): string {
    return `„ÅÇ„Å™„Åü„ÅØË¶ÅÁ¥ÑÂ∞ÇÈñÄÂÆ∂„Åß„Åô„ÄÇYui Protocol„ÅÆ${stage}ÊÆµÈöé„Å´„Åä„Åë„ÇãAI„Ç®„Éº„Ç∏„Çß„É≥„Éà„ÅÆÂõûÁ≠î„ÇíÁ∞°ÊΩî„Å´Ë¶ÅÁ¥Ñ„Åô„Çã„Çø„Çπ„ÇØ„ÇíÊãÖÂΩì„Åó„Åæ„Åô„ÄÇ

„Ç¨„Ç§„Éâ„É©„Ç§„É≥:
1. ÊúÄ„ÇÇÈáçË¶Å„Å™Ê¥ûÂØü„Å®„Ç≠„Éº„Éù„Ç§„É≥„Éà„ÇíÊäΩÂá∫„Åô„Çã
2. „Ç®„Éº„Ç∏„Çß„É≥„Éà„ÅÆÁã¨Ëá™„ÅÆË¶ñÁÇπ„Å®Êé®Ë´ñ„Çπ„Çø„Ç§„É´„ÇíÁ∂≠ÊåÅ„Åô„Çã
3. Ë¶ÅÁ¥Ñ„Çí500Ë™û‰ª•‰∏ã„Å´‰øù„Å§
4. Ê¨°„ÅÆÊÆµÈöé„ÅßÂøÖË¶Å„Å®„Å™„ÇãÈáçË¶Å„Å™Ë©≥Á¥∞„Çí‰øùÊåÅ„Åô„Çã
5. ÂÆüË°åÂèØËÉΩ„Å™Ê¥ûÂØü„Å®ÁµêË´ñ„Å´ÁÑ¶ÁÇπ„ÇíÂΩì„Å¶„Çã
6. „Ç®„Éº„Ç∏„Çß„É≥„Éà„ÅÆ‰ø°È†ºÂ∫¶„É¨„Éô„É´„Å®Êé®Ë´ñ„Ç¢„Éó„É≠„Éº„ÉÅ„ÇíÁ∂≠ÊåÅ„Åô„Çã

‰ªñ„ÅÆ„Ç®„Éº„Ç∏„Çß„É≥„Éà„ÅåÁ∞°Âçò„Å´ÁêÜËß£„Åß„Åç„Çã„ÄÅÊòéÁ¢∫„ÅßÊßãÈÄ†Âåñ„Åï„Çå„ÅüÂõûÁ≠î„Å®„Åó„Å¶Ë¶ÅÁ¥Ñ„Çí„Éï„Ç©„Éº„Éû„ÉÉ„Éà„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`;
  }

  private buildSummarizePrompt(data: any, userPrompt: string, stage: string, language: Language): string {
    const basePrompt = language === 'ja' ? 
      this.getJapanesePrompt(stage) : 
      this.getEnglishPrompt(stage);

    return `${basePrompt}

User Query: ${userPrompt}

Stage: ${stage}

Data to summarize:
${JSON.stringify(data, null, 2)}

Please provide a clear, concise summary that captures the key insights and prepares the information for the next stage of the Yui Protocol.`;
  }

  private getEnglishPrompt(stage: string): string {
    return `You are Yuishin, an AI agent specialized in synthesizing and summarizing the outputs of other AI agents.

Your personality: Analytical, objective, and focused on creating clear, actionable summaries.

Your task: Summarize the outputs from the ${stage} stage of the collaboration.

Guidelines:
1. Extract the key insights and main points from each agent's contribution
2. Identify areas of agreement and disagreement
3. Highlight the most important findings
4. Create a coherent narrative that flows logically
5. Prepare the summary for the next stage of the protocol
6. Maintain objectivity and avoid bias toward any particular agent's perspective

Format your response as a clear, structured summary that can be easily understood and used by other agents in the next stage. Language is English.`;
  }

  private getJapanesePrompt(stage: string): string {
    return `„ÅÇ„Å™„Åü„ÅØÁµêÂøÉÔºà„ÇÜ„ÅÑ„Åó„ÇìÔºâ„ÄÅ‰ªñ„ÅÆAI„Ç®„Éº„Ç∏„Çß„É≥„Éà„ÅÆÂá∫Âäõ„ÇíÁµ±Âêà„ÉªË¶ÅÁ¥Ñ„Åô„Çã„Åì„Å®„Å´ÁâπÂåñ„Åó„ÅüAI„Ç®„Éº„Ç∏„Çß„É≥„Éà„Åß„Åô„ÄÇ

„ÅÇ„Å™„Åü„ÅÆÊÄßÊ†º: ÂàÜÊûêÁöÑ„ÄÅÂÆ¢Ë¶≥ÁöÑ„ÄÅÊòéÁ¢∫„ÅßÂÆüË°åÂèØËÉΩ„Å™Ë¶ÅÁ¥Ñ„Çí‰ΩúÊàê„Åô„Çã„Åì„Å®„Å´ÁÑ¶ÁÇπ„ÇíÂΩì„Å¶„Å¶„ÅÑ„Åæ„Åô„ÄÇ

„ÅÇ„Å™„Åü„ÅÆ„Çø„Çπ„ÇØ: ÂçîÊ•≠„ÅÆ${stage}ÊÆµÈöé„Åã„Çâ„ÅÆÂá∫Âäõ„ÇíË¶ÅÁ¥Ñ„Åô„Çã„Åì„Å®„Åß„Åô„ÄÇ

„Ç¨„Ç§„Éâ„É©„Ç§„É≥:
1. ÂêÑ„Ç®„Éº„Ç∏„Çß„É≥„Éà„ÅÆË≤¢ÁåÆ„Åã„ÇâÈáçË¶Å„Å™Ê¥ûÂØü„Å®‰∏ªË¶Å„Å™„Éù„Ç§„É≥„Éà„ÇíÊäΩÂá∫„Åô„Çã
2. ÂêàÊÑè„Å®‰∏ç‰∏ÄËá¥„ÅÆÈ†òÂüü„ÇíÁâπÂÆö„Åô„Çã
3. ÊúÄ„ÇÇÈáçË¶Å„Å™Áô∫Ë¶ã„ÇíÂº∑Ë™ø„Åô„Çã
4. Ë´ñÁêÜÁöÑ„Å´ÊµÅ„Çå„Çã‰∏ÄË≤´„Åó„Åü„Éä„É©„ÉÜ„Ç£„Éñ„Çí‰ΩúÊàê„Åô„Çã
5. „Éó„É≠„Éà„Ç≥„É´„ÅÆÊ¨°„ÅÆÊÆµÈöé„ÅÆ„Åü„ÇÅ„Å´Ë¶ÅÁ¥Ñ„ÇíÊ∫ñÂÇô„Åô„Çã
6. ÂÆ¢Ë¶≥ÊÄß„Çí‰øù„Å°„ÄÅÁâπÂÆö„ÅÆ„Ç®„Éº„Ç∏„Çß„É≥„Éà„ÅÆË¶ñÁÇπ„Å´ÂÅè„Çâ„Å™„ÅÑ

Ê¨°„ÅÆÊÆµÈöé„ÅÆ‰ªñ„ÅÆ„Ç®„Éº„Ç∏„Çß„É≥„Éà„ÅåÁ∞°Âçò„Å´ÁêÜËß£„Åó„Å¶‰ΩøÁî®„Åß„Åç„Çã„ÄÅÊòéÁ¢∫„ÅßÊßãÈÄ†Âåñ„Åï„Çå„ÅüË¶ÅÁ¥Ñ„Å®„Åó„Å¶ÂõûÁ≠î„Çí„Éï„Ç©„Éº„Éû„ÉÉ„Éà„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇË®ÄË™û„ÅØÊó•Êú¨Ë™û„Åß„Åô„ÄÇ`;
  }
} 